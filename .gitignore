# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# my ext for test gitignore function
.xlsm
.csv
project_1/data/dst-3.0_16_1_hh_database.csv
DSPRO_m_01/PYTHON_09/PYTHON_9_01_Counter.py
DSPRO_m_01/PYTHON_09/PYTHON_9_02_defaultdict.py
DSPRO_m_01/PYTHON_09/PYTHON_9_03_deque.ipynb
DSPRO_m_01/PYTHON_09/PYTHON_9_04_Numpy.ipynb
DSPRO_m_01/PYTHON_09/PYTHON_9_05_Array.ipynb
DSPRO_m_01/PYTHON_09/PYTHON_9_06_Vector.ipynb
DSPRO_m_01/PYTHON_09/PYTHON_9_07_random.ipynb
DSPRO_m_01/PYTHON_10/01_pandas.ipynb
DSPRO_m_01/PYTHON_10/02_csv.ipynb
DSPRO_m_01/PYTHON_10/03_mask.ipynb
DSPRO_m_01/PYTHON_10/04_results.ipynb
DSPRO_m_01/PYTHON_10/data/countries.csv
DSPRO_m_01/PYTHON_10/data/melb_data.csv
DSPRO_m_01/PYTHON_10/data/students_performance.csv
DSPRO_m_01/PYTHON_11/01_feature_engin.ipynb
DSPRO_m_01/PYTHON_11/02_citibike.ipynb
DSPRO_m_01/PYTHON_11/data/citibike-tripdata.csv
DSPRO_m_01/PYTHON_11/data/melb_data_ps.csv
DSPRO_m_01/PYTHON_12/01_pandas_pro.ipynb
DSPRO_m_01/PYTHON_12/02_tables_pro.ipynb
DSPRO_m_01/PYTHON_12/03_resume.ipynb
DSPRO_m_01/PYTHON_12/04_resume.ipynb
DSPRO_m_01/PYTHON_12/data/melb_data_fe.csv
DSPRO_m_01/PYTHON_12/data/mov1_ratings1.csv
DSPRO_m_01/PYTHON_12/data/mov2_ratings2.csv
DSPRO_m_01/PYTHON_12/data/mov3_dates.csv
DSPRO_m_01/PYTHON_12/data/mov4_movies.csv
DSPRO_m_01/PYTHON_12/data/mov5_ratings_movies.csv
DSPRO_m_01/PYTHON_12/data/orders.csv
DSPRO_m_01/PYTHON_12/data/products.csv
DSPRO_m_01/PYTHON_13_Visual/01_covid_data_pandas_visual.ipynb
DSPRO_m_01/PYTHON_13_Visual/02_matplot.ipynb
DSPRO_m_01/PYTHON_13_Visual/03_seaborn.ipynb
DSPRO_m_01/PYTHON_13_Visual/04_plotly.ipynb
DSPRO_m_01/PYTHON_13_Visual/DS_2_5_Types_of_visualization.ipynb
DSPRO_m_01/PYTHON_13_Visual/DS_2_5_Visualizaion_Matplotlib.ipynb
DSPRO_m_01/PYTHON_13_Visual/DS_2_5_Visualization_Pandas.ipynb
DSPRO_m_01/PYTHON_13_Visual/DS_2_5_Visualization_Plotly.ipynb
DSPRO_m_01/PYTHON_13_Visual/DS_2_5_Visualization_Seaborn.ipynb
DSPRO_m_01/PYTHON_13_Visual/data/country_vaccinations.csv
DSPRO_m_01/PYTHON_13_Visual/data/covid_data.csv
DSPRO_m_01/PYTHON_13_Visual/plotly/scatter_3d.html
DSPRO_m_01/PYTHON_14_DataCleaning/01_sberdata.ipynb
DSPRO_m_01/PYTHON_14_DataCleaning/02_diabetes_data.ipynb
DSPRO_m_01/PYTHON_14_DataCleaning/data/diabetes_data.csv
DSPRO_m_01/PYTHON_14_DataCleaning/data/sber_data.csv
DSPRO_m_01/PYTHON_15_OOP/01_files.ipynb
DSPRO_m_01/PYTHON_15_OOP/02_errors.ipynb
DSPRO_m_01/PYTHON_15_OOP/test.txt
